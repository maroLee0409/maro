패치노트 - 버전 1.1.0

#########################
#	1. Filter 추가.		#
#########################
이슈 : 외부 CSS 파일의 변경사항이 반영되지 않고 캐시를 지워야만 프로젝트에 반영되는 문제 발생.
원인 : 
웹 브라우저의 캐싱 매커니즘 때문임. 브라우저는 로드할 때 성능을 최적화 하고 
페이지 로딩 시간을 줄이기 위해 css,javaScript,이미지 등 정적 리소르를 캐시에 저장함.
캐시에 저장된 리소스는 다음 번에 해당 페이지를 방문 할 때 다시 다운로드 하지 않고 캐시도니 파일을 사용항 ㅕ페이지를 더 빠르게 로드할 수 있음.

해결 :
com.global.filter 위치에 CasheControlFilter 클래스 추가.
해당 클래스는 FrontControler 보다 먼저 호출됨. 
자세한 스펙은 해당 클래스를 열어보면 됨.

위 웹브라우징 캐시 기능을 사용할 시 나탈 수 있는 대표적인 이슈 

1. 성능 저하

모든 요청에 대해 캐시를 사용하지 않음: 이 필터는 브라우저와 중간 프록시 서버가 응답을 캐시하지 못하도록 합니다. 
그 결과, 사용자가 동일한 페이지나 리소스를 반복해서 요청할 때마다 서버에서 새로 데이터를 가져오게 됩니다. 
이는 특히 이미지, CSS, JS 파일 같은 정적 자원에 대해 불필요한 서버 부하를 초래할 수 있으며, 
웹사이트의 성능 저하를 유발할 수 있습니다.

2. 트래픽 증가

반복적인 데이터 전송: 캐시를 사용하지 않으면 동일한 자원이 반복적으로 다운로드되어 네트워크 트래픽이 증가합니다. 
이로 인해 사용자의 데이터 사용량이 증가하고, 특히 모바일 네트워크를 사용하는 사용자에게 불편을 줄 수 있습니다.

3. 대규모 사용자에게 확장성 문제

서버 부하 증가: 캐시를 비활성화하면 모든 사용자 요청이 서버로 직접 전달되므로 서버의 부하가 증가할 수 있습니다. 
대규모 사용자가 있는 경우, 서버의 처리 능력을 초과하여 서버 성능 저하 또는 다운타임이 발생할 가능성이 있습니다.

4. 반응 속도 저하

페이지 로드 시간 증가: 캐시된 자원이 없으면 모든 자원을 서버에서 새로 받아야 하므로 페이지 로드 시간이 증가할 수 있습니다. 
이는 특히 느린 인터넷 연결을 사용하는 사용자에게 불리하게 작용할 수 있습니다.

5. 불필요한 리소스 다운로드

동일한 정적 리소스를 계속 다운로드: 로고, 글꼴, 스타일시트 등 자주 변경되지 않는 정적 리소스도 캐시되지 않으면, 
사용자는 매번 동일한 리소스를 다시 다운로드해야 합니다. 이는 사용자 경험을 저하시킬 수 있습니다.

6. 캐시 기능을 필요로 하는 페이지에서 문제 발생

캐시가 필요한 페이지에서도 캐시 비활성화: 예를 들어, 제품 목록 페이지나 공지사항 페이지처럼 자주 변경되지 않으면서 여러 사용자가 접근하는 페이지에서는 캐시가 유용할 수 있습니다. 
이런 페이지들에서도 캐시를 비활성화하면 불필요한 서버 자원 소모와 성능 저하가 발생할 수 있습니다.

7. 오프라인 접근성 저하

PWA(Progressive Web App) 또는 오프라인 지원 감소: 캐시를 비활성화하면 PWA나 오프라인 기능을 구현하는 데 어려움이 발생할 수 있습니다. 
캐시된 리소스를 오프라인 상태에서도 사용할 수 있어야 하는 경우, 이 필터가 장애물이 될 수 있습니다.

8. 사용자 경험 저하

빠른 재방문 사용자 경험 손실: 사용자들이 사이트를 재방문할 때 빠르게 로드되는 경험이 줄어듭니다. 
캐시를 통해 이전에 방문한 페이지가 빠르게 열리는 효과를 얻을 수 있는데, 이를 비활성화하면 반응성이 떨어질 수 있습니다.

9. 필터의 적용 범위 문제

캐시가 필요한 특정 자원까지 모두 비활성화: 웹 애플리케이션 내의 특정 자원(예: 이미지, 스타일시트 등)은 캐시가 필요할 수 있습니다. 
모든 URL에 대해 동일한 캐시 정책을 적용하면, 특정 자원이 불필요하게 캐시 비활성화되어 문제가 될 수 있습니다.

해결책
선택적 캐시 제어: 모든 페이지와 자원이 아닌, 민감한 데이터가 포함된 페이지에만 캐시 제어 필터를 적용하는 방법을 고려해 보세요.

캐시 만료 시간을 조정: Cache-Control 헤더에서 max-age 값을 적절하게 설정하여 필요한 자원은 캐시하고, 필요하지 않은 자원만 캐시를 비활성화할 수 있습니다.
필터를 특정 경로에만 적용: 모든 요청이 아닌, 특정 요청에만 필터를 적용하는 것도 좋은 방법입니다.

현재 프로젝트에 대한 해결 
모든 정적 리소스에 대한 캐싱 리프레시가 아닌 .css로 끝나는 css파일만 적용되도록 함.



#########################
#	2. Reply 테이블명 변경	#
#########################

Reply -> BOARD_REPLY로 변경


기존에 생성해서 썼던 팀원들은 아래 구문을 이용하여 REPLY 테이블을 삭제하고 BOARD_REPLY 테이블로 새로 생성

DROP TABLE REPLY CASCADE CONSTRAINTS;


CREATE TABLE BOARD_REPLY (
    REPLY_NO NUMBER PRIMARY KEY,  
    BOARD_NO NUMBER,  
    USER_NO NUMBER,  
    CONTENT VARCHAR2(4000),  
    LEFT_VAL NUMBER,  -- 중첩 집합에서의 왼쪽 값
    RIGHT_VAL NUMBER,  -- 중첩 집합에서의 오른쪽 값
    NODE_LEVEL NUMBER,  -- 계층 수준 (루트: 1, 자식: 2 등)
    CREATED_AT DATE DEFAULT SYSDATE,  
    UPDATED_AT DATE,  
    IS_DELETED CHAR(1) DEFAULT 'N' CHECK (IS_DELETED IN ('Y', 'N')),  
    FOREIGN KEY (BOARD_NO) REFERENCES BOARD(BOARD_NO),  
    FOREIGN KEY (USER_NO) REFERENCES USERS(USER_NO)
);

* TABLE.sql 파일에 있던 REPLY 관련 BOARD_REPLY로 변경하였음.




