패치노트 - 버전 1.1.0

#########################
#	1. SIF4J LOG 추가.		#
#########################

기본 정보에 대한 System.out.println()을 통해 console로 찍히던것들을 이제 로그를 통해 관리.

TRACE: 가장 상세한 로그 정보. 주로 문제 해결을 위해 코드 실행 경로 및 내부 상태를 추적하는 데 사용.
DEBUG: 디버그 수준의 로그. 개발 중 디버깅 정보를 제공하며, 프로그램의 내부 상태를 상세하게 기록.
INFO: 일반적인 정보성 로그. 애플리케이션의 주요 이벤트나 정상적인 동작을 기록하는 데 사용.
WARN: 경고 로그. 예상치 못한 상황이나 문제가 발생할 가능성이 있는 경우 기록.
ERROR: 심각한 오류가 발생했을 때 기록. 예외 처리나 오류 발생 시 사용.


메시지 포맷팅 (Placeholders 사용)
SLF4J는 String.format 스타일의 문자열 포맷팅 대신 플레이스홀더 방식을 사용합니다. 이를 통해 불필요한 문자열 연산을 피하고, 성능을 개선할 수 있습니다.

플레이스홀더 사용 예시:


int userId = 42;
String userName = "John Doe";
logger.info("User {} with id {} logged in", userName, userId);

==> User John Doe with id 42 logged in**라는 로그 메시지를 출력

SLF4J의 장점
유연한 구현체 교체: SLF4J는 다양한 로깅 프레임워크와 쉽게 통합됩니다. 개발 환경에서 Logback을 사용하고, 운영 환경에서 Log4j를 사용하는 등 필요에 따라 로깅 구현체를 교체할 수 있습니다.
메시지 포맷팅 최적화: SLF4J는 String.format이나 + 연산자를 사용하는 대신 플레이스홀더 방식을 통해 성능을 최적화합니다.
통합 인터페이스 제공: 다양한 로깅 프레임워크를 사용하는 프로젝트에서도 SLF4J를 사용하면 일관된 로깅 인터페이스를 사용할 수 있습니다.


요약
SLF4J는 통합된 로깅 인터페이스를 제공하여 다양한 로깅 구현체를 지원하며, 이를 통해 로깅 시스템을 유연하게 교체하거나 관리할 수 있습니다.
플레이스홀더 방식을 사용해 메시지 포맷팅을 최적화하고, 로그 레벨 설정을 통해 로깅의 세부 사항을 제어할 수 있습니다.
조건부 로깅과 MDC 등을 활용해 성능 및 유지보수성을 개선할 수 있습니다.



#########################
#		#
#########################

